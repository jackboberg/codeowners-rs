use std::{collections::HashMap, error::Error, path::Path};

use crate::project::{PackageType, Project};

pub struct Ownership {
    project: Project,
}

impl Ownership {
    pub fn build(project: Project) -> Self {
        Self { project }
    }

    pub fn write_to_file(&self, path: &Path) -> Result<(), Box<dyn Error>> {
        std::fs::write(path, self.generate_file())?;
        Ok(())
    }

    pub fn generate_file(&self) -> String {
        let team_by_name = self.project.team_by_name();
        let mut lines: Vec<String> = Vec::new();

        lines.append(&mut Self::disclaimer());

        lines.push("# Annotations at the top of file".to_owned());
        lines.append(&mut self.annotations_at_top_of_file(&team_by_name));
        lines.push("".to_owned());

        lines.push("# Team-specific owned globs".to_owned());
        lines.append(&mut self.team_specific_owned_globs());
        lines.push("".to_owned());

        lines.push("# Owner metadata key in package.yml".to_owned());
        lines.append(&mut self.owner_metadata_in_package(&PackageType::Ruby, &team_by_name));
        lines.push("".to_owned());

        lines.push("# Owner metadata key in package.json".to_owned());
        lines.append(&mut self.owner_metadata_in_package(&PackageType::Javascript, &team_by_name));
        lines.push("".to_owned());

        lines.push("# Team YML ownership".to_owned());
        lines.append(&mut self.team_yml_ownership());
        lines.push("".to_owned());

        lines.push("# Team owned gems".to_owned());
        lines.append(&mut self.team_owned_gems());
        lines.push("".to_owned());

        lines.join("\n")
    }

    fn disclaimer() -> Vec<String> {
        vec![
            "# STOP! - DO NOT EDIT THIS FILE MANUALLY",
            "# This file was automatically generated by \"bin/codeownership validate\".",
            "#",
            "# CODEOWNERS is used for GitHub to suggest code/file owners to various GitHub",
            "# teams. This is useful when developers create Pull Requests since the",
            "# code/file owner is notified. Reference GitHub docs for more details:",
            "# https://help.github.com/en/articles/about-code-owners",
            "",
            "",
        ]
        .iter()
        .map(|line| line.to_string())
        .collect()
    }

    fn annotations_at_top_of_file(&self, team_by_name: &HashMap<String, crate::project::Team>) -> Vec<String> {
        let mut lines: Vec<String> = Vec::new();

        for owned_file in &self.project.owned_files {
            if let Some(ref owner) = owned_file.owner {
                let team = team_by_name.get(owner).unwrap_or_else(|| panic!("Couldn't find team {}", owner));
                if team.avoid_ownership {
                    continue;
                }

                let relative_path = self.project.relative_path(&owned_file.path);
                lines.push(format!("/{} {}", relative_path.to_string_lossy(), team.github_team,));
            }
        }

        lines.sort();
        lines
    }

    fn team_specific_owned_globs(&self) -> Vec<String> {
        let mut lines: Vec<String> = Vec::new();

        for team in &self.project.teams {
            if team.avoid_ownership {
                continue;
            }

            for owned_glob in &team.owned_globs {
                lines.push(format!("/{} {}", owned_glob, team.github_team));
            }
        }

        lines.sort();
        lines
    }

    fn owner_metadata_in_package(&self, package_type: &PackageType, team_by_name: &HashMap<String, crate::project::Team>) -> Vec<String> {
        let mut lines: Vec<String> = Vec::new();

        for package in self.project.packages.iter().filter(|package| &package.package_type == package_type) {
            let package_root = package
                .path
                .parent()
                .unwrap_or_else(|| panic!("unable to find package root for {}", &package.path.to_string_lossy()));
            let team = team_by_name
                .get(&package.owner)
                .unwrap_or_else(|| panic!("Couldn't find team {}", package.owner));

            if team.avoid_ownership {
                continue;
            }

            lines.push(format!("/{}/**/** {}", package_root.to_string_lossy(), team.github_team));
        }

        lines.sort();
        lines
    }

    fn team_yml_ownership(&self) -> Vec<String> {
        let mut lines: Vec<String> = Vec::new();

        for team in &self.project.teams {
            if team.avoid_ownership {
                continue;
            }

            lines.push(format!(
                "/{} {}",
                self.project.relative_path(&team.path).to_string_lossy(),
                team.github_team
            ));
        }

        lines.sort();
        lines
    }

    fn team_owned_gems(&self) -> Vec<String> {
        let mut lines: Vec<String> = Vec::new();

        let vendored_gem_by_name = self.project.vendored_gem_by_name();

        for team in &self.project.teams {
            if team.avoid_ownership {
                continue;
            }

            for owned_gem in &team.owned_gems {
                let vendored_gem = vendored_gem_by_name.get(owned_gem);

                if let Some(vendored_gem) = vendored_gem {
                    lines.push(format!(
                        "/{} {}",
                        self.project.relative_path(&vendored_gem.path).to_string_lossy(),
                        team.github_team
                    ))
                }
            }
        }

        lines.sort();
        lines
    }
}

#[cfg(test)]
mod tests {
    use std::path::Path;

    use crate::project::{OwnedFile, Package, PackageType, Project, Team, VendoredGem};

    use super::Ownership;

    fn build_payroll_team() -> Team {
        Team {
            path: Path::new("config/teams/payroll.yml").to_owned(),
            name: "Payroll".to_owned(),
            github_team: "@Payroll-Eng".to_owned(),
            owned_globs: vec![],
            avoid_ownership: false,
            owned_gems: vec![],
        }
    }

    fn build_payroll_team_with_owned_gem() -> Team {
        Team {
            path: Path::new("config/teams/payroll.yml").to_owned(),
            name: "Payroll".to_owned(),
            github_team: "@Payroll-Eng".to_owned(),
            owned_globs: vec![],
            avoid_ownership: false,
            owned_gems: vec!["payroll_calculator".to_owned()],
        }
    }

    fn build_annotated_file() -> OwnedFile {
        OwnedFile {
            owner: Some("Payroll".to_owned()),
            path: Path::new("packs/payroll/services/runner.rb").to_owned(),
        }
    }

    fn build_unannotated_file() -> OwnedFile {
        OwnedFile {
            owner: None,
            path: Path::new("packs/payroll/services/runner_helper.rb").to_owned(),
        }
    }

    fn build_project_with_annotated_file() -> Project {
        Project {
            base_path: Path::new("").to_owned(),
            owned_files: vec![build_annotated_file(), build_unannotated_file()],
            packages: vec![],
            teams: vec![build_payroll_team()],
            vendored_gems: vec![],
        }
    }

    fn build_payroll_team_with_owned_glob() -> Team {
        Team {
            path: Path::new("config/teams/payroll.yml").to_owned(),
            name: "Payroll".to_owned(),
            github_team: "@Payroll-Eng".to_owned(),
            owned_globs: vec!["packs/payroll/**".to_owned()],
            avoid_ownership: false,
            owned_gems: vec![],
        }
    }

    fn build_project_with_team_specific_owned_globs() -> Project {
        Project {
            base_path: Path::new("").to_owned(),
            owned_files: vec![build_unannotated_file()],
            packages: vec![],
            teams: vec![build_payroll_team_with_owned_glob()],
            vendored_gems: vec![],
        }
    }

    fn build_project_with_packages() -> Project {
        Project {
            base_path: Path::new("").to_owned(),
            owned_files: vec![build_unannotated_file()],
            packages: vec![
                Package {
                    path: Path::new("packs/payroll_package/package.yml").to_owned(),
                    package_type: PackageType::Ruby,
                    owner: "Payroll".to_owned(),
                },
                Package {
                    path: Path::new("frontend/payroll_flow/package.json").to_owned(),
                    package_type: PackageType::Javascript,
                    owner: "Payroll".to_owned(),
                },
            ],
            teams: vec![build_payroll_team()],
            vendored_gems: vec![],
        }
    }

    fn build_project_with_team_owned_gems() -> Project {
        Project {
            base_path: Path::new("").to_owned(),
            owned_files: vec![build_unannotated_file()],
            packages: vec![],
            teams: vec![build_payroll_team_with_owned_gem()],
            vendored_gems: vec![VendoredGem {
                path: Path::new("components/payroll_calculator").to_owned(),
                name: "payroll_calculator".to_owned(),
            }],
        }
    }

    #[test]
    fn test_annotations_at_the_top_of_file() {
        let ownership = Ownership::build(build_project_with_annotated_file());

        assert_eq!(
            ownership.generate_file().lines().collect::<Vec<&str>>(),
            with_disclaimer(vec![
                "# Annotations at the top of file",
                "/packs/payroll/services/runner.rb @Payroll-Eng",
                "",
                "# Team-specific owned globs",
                "",
                "# Owner metadata key in package.yml",
                "",
                "# Owner metadata key in package.json",
                "",
                "# Team YML ownership",
                "/config/teams/payroll.yml @Payroll-Eng",
                "",
                "# Team owned gems"
            ])
        )
    }

    #[test]
    fn test_team_specific_owned_globs() {
        let ownership = Ownership::build(build_project_with_team_specific_owned_globs());

        assert_eq!(
            ownership.generate_file().lines().collect::<Vec<&str>>(),
            with_disclaimer(vec![
                "# Annotations at the top of file",
                "",
                "# Team-specific owned globs",
                "/packs/payroll/** @Payroll-Eng",
                "",
                "# Owner metadata key in package.yml",
                "",
                "# Owner metadata key in package.json",
                "",
                "# Team YML ownership",
                "/config/teams/payroll.yml @Payroll-Eng",
                "",
                "# Team owned gems"
            ])
        )
    }

    #[test]
    fn test_owner_metadata_in_package() {
        let ownership = Ownership::build(build_project_with_packages());

        assert_eq!(
            ownership.generate_file().lines().collect::<Vec<&str>>(),
            with_disclaimer(vec![
                "# Annotations at the top of file",
                "",
                "# Team-specific owned globs",
                "",
                "# Owner metadata key in package.yml",
                "/packs/payroll_package/**/** @Payroll-Eng",
                "",
                "# Owner metadata key in package.json",
                "/frontend/payroll_flow/**/** @Payroll-Eng",
                "",
                "# Team YML ownership",
                "/config/teams/payroll.yml @Payroll-Eng",
                "",
                "# Team owned gems"
            ])
        )
    }

    #[test]
    fn test_team_owned_gems() {
        let ownership = Ownership::build(build_project_with_team_owned_gems());

        assert_eq!(
            ownership.generate_file().lines().collect::<Vec<&str>>(),
            with_disclaimer(vec![
                "# Annotations at the top of file",
                "",
                "# Team-specific owned globs",
                "",
                "# Owner metadata key in package.yml",
                "",
                "# Owner metadata key in package.json",
                "",
                "# Team YML ownership",
                "/config/teams/payroll.yml @Payroll-Eng",
                "",
                "# Team owned gems",
                "/components/payroll_calculator @Payroll-Eng"
            ])
        )
    }

    fn with_disclaimer(lines: Vec<&str>) -> Vec<String> {
        let mut buffer: Vec<String> = Vec::new();
        let mut disclaimer = Ownership::disclaimer();

        buffer.append(&mut disclaimer);
        buffer.append(&mut lines.iter().map(|l| l.to_string()).collect());

        buffer
    }
}
